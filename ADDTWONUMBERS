class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: Optional[ListNode]
        :type l2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        # Create a dummy head node for the resulting linked list.
        # This simplifies the logic by not needing to handle a special case for the head.
        dummy_head = ListNode(0)
        current = dummy_head
        carry = 0

        # Loop continues as long as there are nodes in either list or a carry value exists.
        while l1 or l2 or carry:
            # Get the value of the current nodes, or 0 if a list is exhausted.
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            # Calculate the sum and new carry.
            total_sum = val1 + val2 + carry
            carry = total_sum // 10
            digit = total_sum % 10
            
            # Create a new node with the digit and attach it to the result list.
            current.next = ListNode(digit)
            
            # Move to the next nodes.
            current = current.next
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        # Return the next node of the dummy head, which is the actual head of the result.
        return dummy_head.next
